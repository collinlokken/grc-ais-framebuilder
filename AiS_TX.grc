options:
  parameters:
    author: ''
    category: Custom
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: top_block
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: ''
    window_size: 1280, 1024
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [-1, 0]
    rotation: 0
    state: enabled

blocks:
- name: bit_rate
  id: variable
  parameters:
    comment: ''
    value: '9600'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [281, -1]
    rotation: 0
    state: enabled
- name: center_freq
  id: variable
  parameters:
    comment: ''
    value: 162e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 12.0]
    rotation: 0
    state: true
- name: channel_select
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    label0: ''
    label1: ''
    label2: ''
    label3: ''
    label4: ''
    labels: '[]'
    num_opts: '3'
    option0: '0'
    option1: '1'
    option2: '2'
    option3: '3'
    option4: '4'
    options: '[0, 1, 2]'
    orient: Qt.QVBoxLayout
    type: int
    value: '0'
    widget: combo_box
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [664, 36.0]
    rotation: 0
    state: enabled
- name: latitude
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '-90'
    step: '0.1'
    stop: '90'
    value: '63.044153'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [928, 36.0]
    rotation: 0
    state: enabled
- name: longitude
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '-180'
    step: '0.1'
    stop: '180'
    value: '9.344559'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 36.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 2e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [173, 0]
    rotation: 0
    state: enabled
- name: speed
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Speed
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '102'
    value: '7'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1360, 36.0]
    rotation: 0
    state: true
- name: status
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: ''
    label: Status
    label0: ''
    label1: ''
    label2: ''
    label3: ''
    label4: ''
    labels: '["Under way using engine","At anchor","Not under command","Restricted
      manoeuverability","Constrained by her draught","Moored","Aground","Engaged in
      Fishing","Under way sailing","Power-driven vessel towing astern (regional use)","Power-driven
      vessel pushing ahead or towing alongside (regional use).","AIS-SART is active","Ubdefined
      (default)"]'
    num_opts: '0'
    option0: '0'
    option1: '1'
    option2: '2'
    option3: '3'
    option4: '4'
    options: '[0, 1, 2,3,4,5,6,7,8,11,12,14,15]'
    orient: Qt.QVBoxLayout
    type: int
    value: '15'
    widget: combo_box
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 36.0]
    rotation: 0
    state: true
- name: true_heading
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: True Heading
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '359'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 36.0]
    rotation: 0
    state: true
- name: AISTX_Build_Frame_0
  id: AISTX_Build_Frame
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    enable_NRZI: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    sentence: '000001000011101011110111001110011010101111100000000001000110000000101010110001101010011110011000101000010100101111000010111011101111111111001100000000000000000000000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, 97]
    rotation: 0
    state: disabled
- name: AISTX_Build_Frame_1
  id: AISTX_Build_Frame
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    enable_NRZI: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    sentence: '000001000011101011110111001110011010101111100000000001000110000000101010110001101010011110011000101000010100101111000010111011101111111111001100000000000000000000000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 484.0]
    rotation: 0
    state: disabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: '-25000'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_SIN_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 296.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: '25000'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_SIN_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 512.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1096, 320.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0.45'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 320.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0.45'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 416.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0_1
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0.9'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [976, 272.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0_1_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0.9'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [992, 488.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [760, 256.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 480.0]
    rotation: 0
    state: enabled
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 160.0]
    rotation: 0
    state: disabled
- name: blocks_selector_0
  id: blocks_selector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    enabled: 'True'
    input_index: channel_select
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '3'
    num_outputs: '1'
    output_index: '0'
    showports: 'True'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 280.0]
    rotation: 0
    state: enabled
- name: digital_gmsk_mod_0
  id: digital_gmsk_mod
  parameters:
    affinity: ''
    alias: ''
    bt: '0.4'
    comment: ''
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: int(samp_rate/bit_rate)
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 216.0]
    rotation: 0
    state: enabled
- name: digital_gmsk_mod_0_0
  id: digital_gmsk_mod
  parameters:
    affinity: ''
    alias: ''
    bt: '0.4'
    comment: ''
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: int(samp_rate/bit_rate)
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 432.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\nresult = []\n\nclass blk(gr.basic_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ repeat=0, mmsi=247320162, status=15, rot=128, speed=0.1, accuracy=0, longitude=9.344559,\
      \ latitude=63.044153, course=83.4, true_heading=511, ts=38, flags=0, rstatus=0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='AIS Framebuilder',   # will show up in GRC\n  \
      \          in_sig=None,\n            out_sig=[np.byte]\n        )\n        #\
      \ if an attribute with the same name as a parameter is found,\n        # a callback\
      \ is registered (properties work, too).\n        #self.example_param = example_param\n\
      \        self.repeat = repeat\n        self.mmsi = mmsi\n        self.status\
      \ = status\n        self.rot = rot\n        self.speed = speed\n        self.accuracy\
      \ = accuracy\n        self.longitude = longitude\n        self.latitude = latitude\n\
      \        self.course = course\n        self.true_heading = true_heading\n  \
      \      self.ts = ts\n        self.flags = flags\n        self.rstatus = rstatus\n\
      \n    def generate_payload(self, repeat, mmsi, status, rot, speed, accuracy,\
      \ lng, lat, course, true_heading, ts, flags, rstatus):\n        msg_type = \"\
      000001\"\n        repeat = bin(repeat)[2:].rjust(2, \"0\") #2\n        mmsi\
      \ =  bin(mmsi)[2:].rjust(30, \"0\") #30\n        status = bin(status)[2:].rjust(4,\
      \ \"0\") #4\n        rot =   bin(rot)[2:].rjust(8, \"0\") #8\n        speed\
      \ = bin(round(speed*10))[2:].rjust(10, \"0\") # 10\n        accuracy = bin(accuracy)[2:].rjust(1,\
      \ \"0\") #1\n        longitude = '{0:b}'.format(int(round(lng*600000)) & 0b1111111111111111111111111111).rjust(28,'0')\n\
      \        latitude =  '{0:b}'.format(int(round(lat*600000)) & 0b111111111111111111111111111).rjust(27,'0')\n\
      \        course = bin(round(course*10))[2:].rjust(12, \"0\") #12\n        true_heading\
      \ = bin(true_heading)[2:].rjust(9, \"0\") #9\n        ts = bin(ts)[2:].rjust(6,\
      \ \"0\") #6\n        flags = bin(flags)[2:].rjust(6, \"0\") #6\n        rstatus\
      \ = bin(rstatus)[2:].rjust(19, \"0\") #19\n        return msg_type+repeat+mmsi+status+rot+speed+accuracy+longitude+latitude+course+true_heading+ts+flags+rstatus\n\
      \n    \n\n    CRC16_XMODEM_TABLE = [\n        0x0000, 0x1189, 0x2312, 0x329B,\
      \ 0x4624, 0x57AD, 0x6536, 0x74BF,\n        0x8C48, 0x9DC1, 0xAF5A, 0xBED3, 0xCA6C,\
      \ 0xDBE5, 0xE97E, 0xF8F7,\n        0x1081, 0x0108, 0x3393, 0x221A, 0x56A5, 0x472C,\
      \ 0x75B7, 0x643E,\n        0x9CC9, 0x8D40, 0xBFDB, 0xAE52, 0xDAED, 0xCB64, 0xF9FF,\
      \ 0xE876,\n        0x2102, 0x308B, 0x0210, 0x1399, 0x6726, 0x76AF, 0x4434, 0x55BD,\n\
      \        0xAD4A, 0xBCC3, 0x8E58, 0x9FD1, 0xEB6E, 0xFAE7, 0xC87C, 0xD9F5,\n \
      \       0x3183, 0x200A, 0x1291, 0x0318, 0x77A7, 0x662E, 0x54B5, 0x453C,\n  \
      \      0xBDCB, 0xAC42, 0x9ED9, 0x8F50, 0xFBEF, 0xEA66, 0xD8FD, 0xC974,\n   \
      \     0x4204, 0x538D, 0x6116, 0x709F, 0x0420, 0x15A9, 0x2732, 0x36BB,\n    \
      \    0xCE4C, 0xDFC5, 0xED5E, 0xFCD7, 0x8868, 0x99E1, 0xAB7A, 0xBAF3,\n     \
      \   0x5285, 0x430C, 0x7197, 0x601E, 0x14A1, 0x0528, 0x37B3, 0x263A,\n      \
      \  0xDECD, 0xCF44, 0xFDDF, 0xEC56, 0x98E9, 0x8960, 0xBBFB, 0xAA72,\n       \
      \ 0x6306, 0x728F, 0x4014, 0x519D, 0x2522, 0x34AB, 0x0630, 0x17B9,\n        0xEF4E,\
      \ 0xFEC7, 0xCC5C, 0xDDD5, 0xA96A, 0xB8E3, 0x8A78, 0x9BF1,\n        0x7387, 0x620E,\
      \ 0x5095, 0x411C, 0x35A3, 0x242A, 0x16B1, 0x0738,\n        0xFFCF, 0xEE46, 0xDCDD,\
      \ 0xCD54, 0xB9EB, 0xA862, 0x9AF9, 0x8B70,\n        0x8408, 0x9581, 0xA71A, 0xB693,\
      \ 0xC22C, 0xD3A5, 0xE13E, 0xF0B7,\n        0x0840, 0x19C9, 0x2B52, 0x3ADB, 0x4E64,\
      \ 0x5FED, 0x6D76, 0x7CFF,\n        0x9489, 0x8500, 0xB79B, 0xA612, 0xD2AD, 0xC324,\
      \ 0xF1BF, 0xE036,\n        0x18C1, 0x0948, 0x3BD3, 0x2A5A, 0x5EE5, 0x4F6C, 0x7DF7,\
      \ 0x6C7E,\n        0xA50A, 0xB483, 0x8618, 0x9791, 0xE32E, 0xF2A7, 0xC03C, 0xD1B5,\n\
      \        0x2942, 0x38CB, 0x0A50, 0x1BD9, 0x6F66, 0x7EEF, 0x4C74, 0x5DFD,\n \
      \       0xB58B, 0xA402, 0x9699, 0x8710, 0xF3AF, 0xE226, 0xD0BD, 0xC134,\n  \
      \      0x39C3, 0x284A, 0x1AD1, 0x0B58, 0x7FE7, 0x6E6E, 0x5CF5, 0x4D7C,\n   \
      \     0xC60C, 0xD785, 0xE51E, 0xF497, 0x8028, 0x91A1, 0xA33A, 0xB2B3,\n    \
      \    0x4A44, 0x5BCD, 0x6956, 0x78DF, 0x0C60, 0x1DE9, 0x2F72, 0x3EFB,\n     \
      \   0xD68D, 0xC704, 0xF59F, 0xE416, 0x90A9, 0x8120, 0xB3BB, 0xA232,\n      \
      \  0x5AC5, 0x4B4C, 0x79D7, 0x685E, 0x1CE1, 0x0D68, 0x3FF3, 0x2E7A,\n       \
      \ 0xE70E, 0xF687, 0xC41C, 0xD595, 0xA12A, 0xB0A3, 0x8238, 0x93B1,\n        0x6B46,\
      \ 0x7ACF, 0x4854, 0x59DD, 0x2D62, 0x3CEB, 0x0E70, 0x1FF9,\n        0xF78F, 0xE606,\
      \ 0xD49D, 0xC514, 0xB1AB, 0xA022, 0x92B9, 0x8330,\n        0x7BC7, 0x6A4E, 0x58D5,\
      \ 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78\n        ]\n\n\n    def _crc16(self,\
      \ data, crc, table):\n        \"\"\"Calculate CRC16 using the given table.\n\
      \        `data`      - data for calculating CRC, must be bytes\n        `crc`\
      \       - initial value\n        `table`     - table for caclulating CRC (list\
      \ of 256 integers)\n        Return calculated value of CRC\n        \"\"\"\n\
      \        for byte in data:\n            crc = (crc >> 8) ^ table[(crc ^ byte)\
      \ & 0xff]\n\n        crc = (crc & 0xffff) ^ 0xffff  # integer\n\n        #crc\
      \ = reverse_bit_order((crc).to_bytes(2, 'big'))  # revert crc bit in byte\n\
      \        crc = self.bytes_to_bitstring((crc).to_bytes(2, 'big'))\n\n       \
      \ first = crc[:8]\n\n        last = crc[8:]\n\n        crc = last + first  #\
      \ swap the two crc byte\n\n        return int(crc,2).to_bytes(2,'big')\n\n\n\
      \    def crc16xmodem(self, data, crc=65535):  # 0xffff\n        \"\"\"Calculate\
      \ CRC-CCITT (XModem) variant of CRC16.\n        `data`      - data for calculating\
      \ CRC, must be bytes\n        `crc`       - initial value\n        Return calculated\
      \ value of CRC\n        \"\"\"\n        return self._crc16(data, crc, self.CRC16_XMODEM_TABLE)\n\
      \n    def bytes_to_bitstring(self, bytes):\n\n        return bin(int.from_bytes(bytes,\
      \ 'big'))[2:].rjust(len(bytes)*8,'0')  # converts bytes to string of bits  \
      \ b'\\x04'   ->   \"00000100\"\n\n    def bitStuffing(self, bitstring):\n\n\
      \        consecutives = 0\n        for i in range(len(bitstring)):\n       \
      \     if bitstring[i] == '1':\n                consecutives += 1\n         \
      \   else: consecutives = 0\n\n            if consecutives == 5:\n          \
      \      bitstring = bitstring[:i+1] + '0' + bitstring[i+1:]\n\n        return\
      \ bitstring\n\n    def padd_frame(self, frame, length=256):\n        return\
      \ frame.ljust(length, '0')\n\n    def nrz_to_nrzi(self, input):\n        prev_nrzi_bit\
      \ = 0\n        length = len(input)\n        result = [0]*length\n\n        for\
      \ i in range(length):\n            nrz_bit = input[i]\n            \n      \
      \      if nrz_bit == '0':\n                nrzi_bit = prev_nrzi_bit ^ 1\n  \
      \          else:\n                nrzi_bit = prev_nrzi_bit\n            \n \
      \           result[i] = str(nrzi_bit)\n            prev_nrzi_bit = nrzi_bit\n\
      \n        return ''.join(result)\n\n    def reverse_bit_order(self, bytes):\n\
      \n        bitstring = self.bytes_to_bitstring(bytes)\n\n        for i in range(0,len(bitstring),8):\n\
      \            block = bitstring[i:i+8]\n            bitstring = bitstring[:i]\
      \ + block[::-1] + bitstring[i+8:]\n\n        return bitstring\n\n    def append_bytes_together(self,\
      \ bytes1, bytes2):\n        result = bytearray(bytes1)\n        for byte in\
      \ bytes2:\n            result.append(byte)\n\n        return result\n    \n\
      \    def bitstring_to_bytes(self, bitstring):\n        result = bytearray()\n\
      \n        for i in range(0, len(bitstring), 8):\n            single = int(bitstring[i:i+8],2).to_bytes(1,\
      \ 'big')\n            result = self.append_bytes_together(result, single)\n\n\
      \        return result\n        \n    def build_frame(self):\n        global\
      \ result\n        \n        preamble = \"101010101010101010101010\"\n      \
      \  start_flag = \"01111110\"\n        end_flag = start_flag\n\n        bitstring_payload\
      \ = self.generate_payload(self.repeat, self.mmsi, self.status, self.rot, self.speed,\
      \ self.accuracy, self.longitude, self.latitude, self.course, self.true_heading,\
      \ self.ts, self.flags, self.rstatus)\n        int_payload = int(bitstring_payload,\
      \ 2)\n        byte_payload = int_payload.to_bytes(len(bitstring_payload)//8,'big')\n\
      \n        crc = self.crc16xmodem(byte_payload)\n\n        payload_crc = self.append_bytes_together(byte_payload,\
      \ crc)\n\n        payload_crc = self.reverse_bit_order(payload_crc)\n\n    \
      \    stuffed_payload = self.bitStuffing(payload_crc)\n\n        padded_frame\
      \ = self.padd_frame(preamble+start_flag+stuffed_payload+end_flag)\n\n      \
      \  final_frame = self.nrz_to_nrzi(padded_frame)\n        \n        result =\
      \ [k for k in self.bitstring_to_bytes(final_frame)]\n\n    def work(self, input_items,\
      \ output_items):\n    \n        #print(\"Buffer:  \"+ str(len(output_items[0])))\n\
      \        \n        time.sleep(1)\n        \n        global result\n        \n\
      \        self.build_frame()\n        \n        if len(output_items[0]) >= len(result):\n\
      \        \n            for i in range(len(result)):\n                output_items[0][i]\
      \ = result[i]\n            \n            output_length = len(result)\n     \
      \       \n        else:\n            output_length = 0\n        \n        return\
      \ output_length\n        \n"
    accuracy: '0'
    affinity: ''
    alias: ''
    comment: ''
    course: '83.4'
    flags: '0'
    latitude: latitude
    longitude: longitude
    maxoutbuf: '0'
    minoutbuf: '0'
    mmsi: '247320162'
    repeat: '0'
    rot: '128'
    rstatus: '0'
    speed: speed
    status: status
    true_heading: true_heading
    ts: '38'
  states:
    _io_cache: ('AIS Framebuilder', 'blk', [('repeat', '0'), ('mmsi', '247320162'),
      ('status', '15'), ('rot', '128'), ('speed', '0.1'), ('accuracy', '0'), ('longitude',
      '9.344559'), ('latitude', '63.044153'), ('course', '83.4'), ('true_heading',
      '511'), ('ts', '38'), ('flags', '0'), ('rstatus', '0')], [], [('0', 'byte',
      1)], 'Embedded Python Block example - a simple multiply const', ['accuracy',
      'course', 'flags', 'latitude', 'longitude', 'mmsi', 'repeat', 'rot', 'rstatus',
      'speed', 'status', 'true_heading', 'ts'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 228.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, example_param=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Embedded Python Block',   # will show up in GRC\n\
      \            in_sig=[np.byte],\n            out_sig=[np.byte]\n        )\n \
      \       # if an attribute with the same name as a parameter is found,\n    \
      \    # a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n\n    def work(self, input_items, output_items):\n      \
      \  \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:] =\
      \ input_items[0]\n        \n        print(\"IN:  \",input_items)\n        \n\
      \        \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [('0',
      'byte', 1)], [('0', 'byte', 1)], 'Embedded Python Block example - a simple multiply
      const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [96, 284.0]
    rotation: 0
    state: disabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nMorse code vector source\n\"\"\"\n\n#  epy_block_0.py\n\
      #  revised 09/10/2019 - finish code table\n#  revised 09/11/2019 - test for\
      \ bad character\n#  revised 09/27/2019 - get input from a Message Edit block\
      \ (code from Volker Schroer dl1ksv)\n\nimport numpy as np\nfrom gnuradio import\
      \ gr\n\nimport pmt\n\ntextboxValue = \"\"\n\nMorse = {\n  # codes from https://www.itu.int/rec/R-REC-M.1677-1-200910-I/en\n\
      \    \"A\": \"1,0,1,1,1\",\n    \"B\": \"1,1,1,0,1,0,1,0,1\",\n    \"C\": \"\
      1,1,1,0,1,0,1,1,1,0,1\",\n    \"D\": \"1,1,1,0,1,0,1\",\n    \"E\": \"1\",\n\
      \    \"F\": \"1,0,1,0,1,1,1,0,1\",\n    \"G\": \"1,1,1,0,1,1,1,0,1\",\n    \"\
      H\": \"1,0,1,0,1,0,1\",\n    \"I\": \"1,0,1\",\n    \"J\": \"1,0,1,1,1,0,1,1,1,0,1,1,1\"\
      ,\n    \"K\": \"1,1,1,0,1,0,1,1,1\",\n    \"L\": \"1,0,1,1,1,0,1,0,1\",\n  \
      \  \"M\": \"1,1,1,0,1,1,1\",\n    \"N\": \"1,1,1,0,1\",\n    \"O\": \"1,1,1,0,1,1,1,0,1,1,1\"\
      ,\n    \"P\": \"1,0,1,1,1,0,1,1,1,0,1\",\n    \"Q\": \"1,1,1,0,1,1,1,0,1,0,1,1,1\"\
      ,\n    \"R\": \"1,0,1,1,1,0,1\",\n    \"S\": \"1,0,1,0,1\",\n    \"T\": \"1,1,1\"\
      ,\n    \"U\": \"1,0,1,0,1,1,1\",\n    \"V\": \"1,0,1,0,1,0,1,1,1\",\n    \"\
      W\": \"1,0,1,1,1,0,1,1,1\",\n    \"X\": \"1,1,1,0,1,0,1,0,1,1,1\",\n    \"Y\"\
      : \"1,1,1,0,1,0,1,1,1,0,1,1,1\",\n    \"Z\": \"1,1,1,0,1,1,1,0,1,0,1\",\n  \
      \  \" \": \"0\",            # space\n    \"1\": \"1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1\"\
      ,\n    \"2\": \"1,0,1,0,1,1,1,0,1,1,1,0,1,1,1\",\n    \"3\": \"1,0,1,0,1,0,1,1,1,0,1,1,1\"\
      ,\n    \"4\": \"1,0,1,0,1,0,1,0,1,1,1\",\n    \"5\": \"1,0,1,0,1,0,1,0,1\",\n\
      \    \"6\": \"1,1,1,0,1,0,1,0,1,0,1\",\n    \"7\": \"1,1,1,0,1,1,1,0,1,0,1,0,1\"\
      ,\n    \"8\": \"1,1,1,0,1,1,1,0,1,1,1,0,1,0,1\",\n    \"9\": \"1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1\"\
      ,\n    \"0\": \"1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1\",\n    \".\": \"1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1\"\
      ,          # period\n    \",\": \"1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1\", \
      \     # comma\n    \":\": \"1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1\",          #\
      \ colon\n    \"?\": \"1,0,1,0,1,1,1,0,1,1,1,0,1,0,1\",              # question\n\
      \    \"'\": \"1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1\",      # apostrophe\n \
      \   \"-\": \"1,1,1,0,1,0,1,0,1,0,1,0,1,1,1\",              # dash or minus\n\
      \    \"/\": \"1,1,1,0,1,0,1,0,1,1,1,0,1\",                  # slash\n    \"\
      (\": \"1,1,1,0,1,0,1,1,1,0,1,1,1,0,1\",              # left parenthesis\n  \
      \  \")\": \"1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1\",      # right parenthesis\n\
      \    \"\\\"\": \"1,0,1,1,1,0,1,0,1,0,1,1,1,0,1\",             # quote\n    \"\
      =\": \"1,1,1,0,1,0,1,0,1,0,1,1,1\",                  # equals\n    \"+\": \"\
      1,0,1,1,1,0,1,0,1,1,1,0,1\",                  # plus\n    \"@\": \"1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1\"\
      ,          # at sign (@)\n  # these punctuation marks are not included in the\
      \ ITU recommendation,\n  # but are found in https://en.wikipedia.org/wiki/Morse_code\n\
      \    \"!\": \"1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1\",      # exclamation point\n\
      \    \"&\": \"1,0,1,1,1,0,1,0,1,0,1\",                      # ampersand (also\
      \ prosign for 'WAIT')\n    \";\": \"1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1\",   \
      \       # semicolon\n    \"_\": \"1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1\",     \
      \     # underscore\n    \"$\": \"1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1\"       \
      \    # dollar sign\n      }\n\nclass mc_sync_block(gr.sync_block):\n    \"\"\
      \"\n    reads input from a message port\n    generates a vector of Morse code\
      \ bits\n    \"\"\"\n    def __init__(self):\n        gr.sync_block.__init__(self,\n\
      \            name = \"Morse code vector source\",\n            in_sig = None,\n\
      \            out_sig = [np.byte])\n        self.message_port_register_in(pmt.intern('msg_in'))\n\
      \        self.message_port_register_out(pmt.intern('clear_input'))\n       \
      \ self.set_msg_handler(pmt.intern('msg_in'), self.handle_msg)\n\n    def handle_msg(self,\
      \ msg):\n        global textboxValue\n        textboxValue = pmt.symbol_to_string\
      \ (msg)\n        # print (textboxValue)\n    \n    def work(self, input_items,\
      \ output_items):\n        global Morse\n        global textboxValue\n      \
      \  bit_stream = \"\"\n        \n        if (len (textboxValue) > 0):\n     \
      \       for in0 in textboxValue:\n                # get next char\n        \
      \        inChar = str (in0)\n                # convert to upper case\n     \
      \           ch = inChar.upper()\n                # test for character in table\n\
      \                if (not(ch in Morse)):\n                # print (\"bad char\"\
      , ch)\n                    ch = \"?\"        # replace bad character with a\
      \ '?'\n                # build vector\n                _dots = str (Morse.get(ch))\n\
      \                # print (ch, _dots)\n                bit_stream += (_dots +\
      \ \",0,0,0,\")    # letter space\n\n            bit_stream += \"0,0,0,0\"  \
      \  # finish with word space\n            # print (bit_stream)\n\n          \
      \  # get length of string\n            _len = len(bit_stream)\n            #\
      \ num of elements = (length+1) / 2\n            _num_elem = int((_len+1) / 2)\n\
      \            print(bit_stream)\n            # convert and store elements in\
      \ output array\n            for x in range (_len):\n                y = int(x\
      \ / 2)\n                if (bit_stream[x] == '1'):\n                    output_items[0][y]\
      \ = 1\n                elif (bit_stream[x] == '0'):\n                    output_items[0][y]\
      \ = 0\n                else:\n                    continue    # skip commas\n\
      \n            # clear input line\n            #textboxValue = \"\"\n       \
      \     #self.message_port_pub(pmt.intern('clear_input'), pmt.intern(''))\n  \
      \      else:\n            print(\"was zero\")\n            _num_elem = 0\n \
      \           \n        print(output_items[0], len(output_items[0]))\n\n     \
      \   return (_num_elem)\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Morse code vector source', 'mc_sync_block', [], [('msg_in', 'message',
      1)], [('0', 'byte', 1), ('clear_input', 'message', 1)], '\n    reads input from
      a message port\n    generates a vector of Morse code bits\n    ', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 360.0]
    rotation: 0
    state: disabled
- name: osmosdr_sink_0
  id: osmosdr_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: '""'
    bb_gain0: '20'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    freq0: center_freq
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '10'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    if_gain0: '20'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1344, 592.0]
    rotation: 0
    state: disabled
- name: qtgui_edit_box_msg_0
  id: qtgui_edit_box_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gui_hint: ''
    is_pair: 'False'
    is_static: 'True'
    key: fvdfggdf
    label: input
    maxoutbuf: '0'
    minoutbuf: '0'
    type: string
    value: hello
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 460.0]
    rotation: 0
    state: disabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    average: '0.1'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: center_freq
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'True'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: firdes.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1512, 328.0]
    rotation: 0
    state: enabled
- name: uhd_usrp_sink_0
  id: uhd_usrp_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: TX/RX
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: uhd.tune_request_t(162000000, 19000000)
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: '0.0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dev_addr: ''
    dev_args: '""'
    gain0: '0'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    len_tag_name: ''
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    norm_gain0: 'False'
    norm_gain1: 'False'
    norm_gain10: 'False'
    norm_gain11: 'False'
    norm_gain12: 'False'
    norm_gain13: 'False'
    norm_gain14: 'False'
    norm_gain15: 'False'
    norm_gain16: 'False'
    norm_gain17: 'False'
    norm_gain18: 'False'
    norm_gain19: 'False'
    norm_gain2: 'False'
    norm_gain20: 'False'
    norm_gain21: 'False'
    norm_gain22: 'False'
    norm_gain23: 'False'
    norm_gain24: 'False'
    norm_gain25: 'False'
    norm_gain26: 'False'
    norm_gain27: 'False'
    norm_gain28: 'False'
    norm_gain29: 'False'
    norm_gain3: 'False'
    norm_gain30: 'False'
    norm_gain31: 'False'
    norm_gain4: 'False'
    norm_gain5: 'False'
    norm_gain6: 'False'
    norm_gain7: 'False'
    norm_gain8: 'False'
    norm_gain9: 'False'
    num_mboards: '1'
    otw: ''
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: gpsdo
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1360, 464.0]
    rotation: 0
    state: disabled

connections:
- [AISTX_Build_Frame_0, '0', epy_block_1, '0']
- [AISTX_Build_Frame_1, '0', digital_gmsk_mod_0_0, '0']
- [analog_sig_source_x_0, '0', blocks_multiply_xx_0, '1']
- [analog_sig_source_x_0_0, '0', blocks_multiply_xx_0_0, '1']
- [blocks_add_xx_0, '0', blocks_selector_0, '1']
- [blocks_multiply_const_vxx_0, '0', blocks_add_xx_0, '0']
- [blocks_multiply_const_vxx_0_0, '0', blocks_add_xx_0, '1']
- [blocks_multiply_const_vxx_0_1, '0', blocks_selector_0, '0']
- [blocks_multiply_const_vxx_0_1_0, '0', blocks_selector_0, '2']
- [blocks_multiply_xx_0, '0', blocks_multiply_const_vxx_0, '0']
- [blocks_multiply_xx_0, '0', blocks_multiply_const_vxx_0_1, '0']
- [blocks_multiply_xx_0_0, '0', blocks_multiply_const_vxx_0_0, '0']
- [blocks_multiply_xx_0_0, '0', blocks_multiply_const_vxx_0_1_0, '0']
- [blocks_selector_0, '0', osmosdr_sink_0, '0']
- [blocks_selector_0, '0', qtgui_freq_sink_x_0, '0']
- [blocks_selector_0, '0', uhd_usrp_sink_0, '0']
- [digital_gmsk_mod_0, '0', blocks_multiply_xx_0, '0']
- [digital_gmsk_mod_0_0, '0', blocks_multiply_xx_0_0, '0']
- [epy_block_0, '0', digital_gmsk_mod_0, '0']
- [epy_block_0, '0', digital_gmsk_mod_0_0, '0']
- [epy_block_1, '0', blocks_null_sink_0, '0']
- [epy_block_1, '0', digital_gmsk_mod_0, '0']
- [epy_block_1, '0', digital_gmsk_mod_0_0, '0']
- [epy_block_2, '0', epy_block_1, '0']
- [epy_block_2, clear_input, qtgui_edit_box_msg_0, val]
- [qtgui_edit_box_msg_0, msg, epy_block_2, msg_in]

metadata:
  file_format: 1
